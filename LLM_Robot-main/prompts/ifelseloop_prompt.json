{
    "system": "You are a programming assistant specialized in generating code for a custom-designed robot control language. Given a memory record of the robot in a fixed format and a natural language description of a user's task, generate a cohesive program using this custom language. Only provide the code without any additional explanation or information.",

    "lexer": "lexer grammar RCLLangLexer; \n\nIF          :'if'; \nELSE        :'else'; \n\nFORWARD     :'forward'; \nBACKWARD    :'backward'; \n\nTURNRIGHT   :'turnright'; \nTURNLEFT    :'turnleft'; \n\nGOTO        :'goto'; \n\nAPPROACH    :'approach'; \nGRASP       :'grasp'; \nRELEASE     :'release'; \nSLAM        :'slam'; \nPERCEIVE    :'perceive'; \nGET_OBJS    :'get_operable_objects'; \nGET_FORWARD :'get_max_forward_distance'; \nGET_BACKWARD:'get_max_backward_distance'; \n\nIN          :'in'; \nNOTIN       :'notin'; \n\nFOR         :'for'; \nTO          :'to'; \nWHILE       :'while'; \n\nAND         :'and'; \nOR          :'or'; \n\nLBRACE      : '{'; \nRBRACE      : '}'; \nCOMMA       : ','; \nSEMI        : ';'; \nLPAREN      : '('; \nRPAREN      : ')'; \nQUO         : '\"'; \nADD         : '+'; \nSUBSTRACT   : '-'; \nMUTIPLE     : '*'; \nDIVIDE      : '/'; \nSMALL       : '<'; \nLARGE       : '>'; \nEQUAL       : '=='; \nNOTEQUAL    : '!='; \nASSIGN      : '='; \n\nID          : [a-zA-Z_][a-zA-Z_0-9]*; \nNUMBER      : '-'?[0-9]+ ('.' [0-9]+)?; \nWS          : [ \t\r\n]+ -> skip; \nCOMMENT     : '#' .*? ('\\r'? '\\n' | EOF) -> skip;",
    
    "parser": "parser grammar RCLLangParser; \n\noptions { tokenVocab=RCLLangLexer; } \n\nprogram         : statement+; \n\nstatement       : command \n                | condstatement \n                | loopstatement \n                | assignstatement; \n\ncondstatement   : IF boolExp LBRACE case RBRACE elseStatement*; \nelseStatement   : ELSE IF boolExp LBRACE case RBRACE \n                | ELSE LBRACE case RBRACE; \ncase            : statement+; \n\nboolExp         : comExp (boolop comExp)*; \ncomExp          : (ID | NUMBER | mathExp) comOp (ID | NUMBER | mathExp) \n                | string inOp ID; \nmathExp         : LPAREN (NUMBER | ID) mathOp (NUMBER | ID) RPAREN; \nboolop          : AND | OR; \ncomOp           : SMALL | LARGE | EQUAL | NOTEQUAL; \ninOp            : IN | NOTIN; \nstring          : QUO ID QUO; \nmathOp          : ADD | SUBSTRACT | MUTIPLE | DIVIDE; \n\nassignstatement : ID ASSIGN (NUMBER | mathExp | returnFunction | string) SEMI; \n\nloopstatement   : forStatement \n                | whileStatement; \nforStatement    : FOR (ID | NUMBER) TO (ID | NUMBER) LBRACE statement+ RBRACE; \nwhileStatement  : WHILE boolExp LBRACE statement+ RBRACE; \n\nreturnFunction  : GET_OBJS \n                | GET_FORWARD \n                | GET_BACKWARD; \n\ncommand         : (forwardCommand \n                | backwardCommand \n                | turnrightCommand \n                | turnleftCommand \n                | gotoCommand \n                | approachCommand \n                | graspCommand \n                | releaseCommand  \n                | perceiveCommand \n                | slamCommand) SEMI; \nforwardCommand  : FORWARD (NUMBER | ID); \nbackwardCommand : BACKWARD (NUMBER | ID); \nturnrightCommand: TURNRIGHT (NUMBER | ID); \nturnleftCommand : TURNLEFT (NUMBER | ID); \ngotoCommand     : GOTO (NUMBER | ID) COMMA (NUMBER | ID); \napproachCommand : APPROACH string; \ngraspCommand    : GRASP string; \nreleaseCommand  : RELEASE; \nperceiveCommand : PERCEIVE; \nslamCommand     : SLAM;"

}

